
CS 293
Data Structures and Algorithms Lab
Autumn 2016


Lab 3. 5.8.16
-----

This lab will concern itself with then linked-list data structure.
A linked-list is an important data structure to store data elements
in a dynamic manner, especially when number if elements are not known.
Linked-list can be combined with other data structures like trees and
hashmaps for quick and indexed lookup. An example of a linked list in
the real world---you are using one as you read this, the list of all
processes on a Linux operating systemt are stored as a linked list!

In this lab we will develop a data store which use a list of lists to
store information about data items.

A stream of data item IDs, indicates the number of occurences of this
data item. e.g., the sequence: 3 2 3 4 3 3 2 1 1 indicates that the data
items 3 occured/was accessed four times, data items 2 and 1 occured twice 
and data item 4 once.

A first list acts as an index to items that have been accessed a certain
number of times. Each item of the first list, not only stores the
associated counter of that list node, but also stores a pointer to 
set of list items, which store the date item value.

e.g., the previsous sequence will be stored as follows,

0 -> NULL
|
1 -> 4
|
2 -> 2 -> 1
|
4 -> 3

The first column, represents the list with nodes storing different items,
each of which occured (so far) a certain number of times.
Each node of this list points to a node corresponing to a list of 
data item values accessed that many times.
All list are single linked lists.

The following needs to be implemented as part of the lab,

1. A template class that is capable of creating objects to store
different types of date item values.
The class should support the following operations,

insert(x) - 	insert a value in the data store
	       	on insert the counter for the value should change.
		e.g., on first access all items are added the to list with count 1.
		on a repeat access, the count is 2 and the data item has to be moved
		from the list. if required a new list item to store list items
		with the new count has to be created.

		all inserts to the count_list should be added to head of list.

		count_list nodes should exist only if there are data items corresponding
		to that count. if no items exist, the node should be deleted or should
		not exist.

search(x) -	search for a value. return the count related to the value

reset()   -	reset the access count of each of items added so far to zero

find_max() - 	print the maximum value of count

list_max() - 	print the list of values with maximum count and return count

decrement(x) - 	decrement by one the count of data item x

eject(x) - 	delete from datastore the data item value with x

list_zero() - 	prints all element with count 0, if any

list_count(x) - print all elements in the access count list with count as x. print nothing if no data items exist for that count.

print() - 	print the data store, in increading order of count stored in the count_list.

2. Extra credit.
Add a vector that stores the address of the count node that lists the
data item in its list. This is used to directly locate the index node in
which the data item is stored for increment and decrement operations.
Without this vector, the entire count list will have to traversed to
search the data item for operations.

index(x) - 	should return the count index node whose list contains the data item.

option 1:	store the address of nodes per data item in a vector and update
  	       	on increment, decrement, reset etc.
		this will work okay for integer data items.
		vector implementation can get sub-optimal because of holes.

option 2: 	use maps or hashmaps from the C++ standard template library.

3. A sample header file with the class declaration and required public member
functions is attached.

Also attached are sample input and output files and a readme to specify
the format of the input file.

Note: The exercise testcases do not test all the specfied
functionality, but are meant to test your implementation
for the provided programs only. Separate testcase will be
used to check actual correctnesss and handling of cornes
cases etc.

4. Submission details

(i) You need to submit 3 main files: 

main1.cpp - for test cases (input1 to input8 for float)
main2.cpp - for test case (input9 for char)
main3.cpp - for test case (input10 for int)

(ii) For test cases input8 and input9, use the following command---

time (./a.out < input8(or 9) > output8(or 9) 2>> output8(or 9)


Submit a tar ball with name <roll_number_lab3>.tar.gz
The directory structure should be:

-15xxxxxxx_lab3.tar.gz
     |-15xxxxxxx_lab3/
	   |-list_of_list.h
	   |-list_of_list.cpp
	   |-main1.cpp
	   |-main2.cpp
	   |-main3.cpp
	   |-testcases/
	   	|-input1
	   	|-output1
	   	|-input2
	   	|-output2
	   	...

